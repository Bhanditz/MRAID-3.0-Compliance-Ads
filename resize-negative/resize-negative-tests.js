// ==============================  MRAID INIT  ================================
if (document.readyState === 'complete') {
  readyCheck();
} else {
    window.addEventListener('load', readyCheck, false);
}

function readyCheck() {
    if (window.MRAID_ENV) {
        console.log('Version: ' + window.MRAID_ENV.version +
            ' SDK: ' + window.MRAID_ENV.sdk +
            ' SDKv: ' + window.MRAID_ENV.sdkVersion);
    } else {
        console.error('MRAID_ENV NOT FOUND');
    }

    var fakeMraid = {
        addEventListener: function () {},
        removeEventListener: function () {},
        resize: function () {},
        setResizeProperties: function () {},
        getMaxSize: function () {
            return {
                width: 300,
                height: 600
            };
        },
        getState: function () {
            return 'default'
        },
        expand: function () {}
    };

    var _mraid = window.mraid || fakeMraid;

    if (_mraid.getState() === 'loading') {
        _mraid.addEventListener('ready', startTests);
    } else {
        // You can specify done function, timeout (for how long to wait for events), log and error functions
        startTests(_mraid, () => {
            console.log('[ALL NEGATIVE RESIZE TESTS FINISHED]')
        }, 5000, console.log, console.error);
    }
}
// ============================================================================

/**
 * Sequentially executes resize negative tests - see TESTS region. Covers cases when 'error' event must be fired.
 * 
 * @param mraid MRAID instance to use.
 * @param done Callback function, executed once all tests ran. 
 * @param waitTimeout How long to wait for events.
 * @param log Callback that should get log strings.
 * @param error  Callback that receives error strings.
 */
function startTests(mraid, done, waitTimeout, log, error) {
    this.error = error || console.error;
    this.log = log || console.log;

    var resizeErrorEventTests = [{
            test: resizeWithoutSetSize,
            description: 'Resizing without setting size properties first should trigger an error.'
        },
        {
            test: resizeBeforeSetSize,
            description: 'Resizing before setting size properties first should trigger an error.'
        }
    ];

    var setResizePropertiesTests = [{
            test: setUndefinedResizeProperties,
            description: 'Calling setResizeProperties with undefined size properties should trigger an error.'
        },
        {
            test: setEmptyResizeProperties,
            description: 'Calling setResizeProperties without actual size properties should trigger an error.'
        },
        {
            test: setIncompleteResizeProperties,
            description: 'Calling setResizeProperties with incomplete list of required size properties should trigger an error.'
        },
        {
            test: setInvalidResizeProperties,
            description: 'Calling setResizeProperties with invalid size properties should trigger an error.'
        },
        {
            test: setInvalidResizeProperties,
            description: 'Setting ad size less than 50x50 should trigger an error.'
        },
        {
            test: setTooLargeSizeResizeProperties,
            description: 'Setting size more than the ad max size should trigger an error.'
        },
        {
            test: setCloseButtonZoneOffscreenOffsetX,
            description: 'Setting offsetX that moves close button offscreen should trigger an error.'
        },
        {
            test: setCloseButtonZoneOffscreenOffsetY,
            description: 'Setting offsetY that moves close button offscreen should trigger an error.'
        },
        {
            test: setCloseButtonZoneOffscreenOffsetXY,
            description: 'Setting offsetX and offsetY that moves close button partially offscreen should trigger an error.'
        },
        {
            test: setCloseButtonZoneOffscreenWidth,
            description: 'Setting width that moves close button offscreen should trigger an error.'
        }
    ];

    var expandedStateResizeErrorEventTests = [{
        test: resizeInExpandedStateTest,
        description: 'Resizing in expanded state should trigger an error.'
    }];

    var resizeErrorEventTester = new EventTester(resizeErrorEventTests, 'error', 'Error events generated by resize.', mraid, waitTimeout, log, error);
    var setResizePropertiesErrorEventTester = new EventTester(setResizePropertiesTests, 'error', 'Error events generated by setResizeProperties.', mraid, waitTimeout, log, error);
    var expandedStateResizeErrorEventTester = new EventTester(expandedStateResizeErrorEventTests, 'error', 'Error events generated by resize in expanded state', mraid, waitTimeout, log, error);

    // these tests can be run in 'default state'
    var sequentialRunner = new SequentialRunner([resizeErrorEventTester, setResizePropertiesErrorEventTester]);
    sequentialRunner.run(continueInExpandedState);

    function continueInExpandedState() {
        mraid.addEventListener('stateChange', stateChange);
        mraid.expand();
        var wait = setTimeout(function () {
            mraid.removeEventListener('stateChange', stateChange);
            error('Failed to set expanded state.');
            if (done) {
                done();
            }
        }, waitTimeout);

        function stateChange() {
            clearTimeout(wait);
            mraid.removeEventListener('stateChange', stateChange);
            // this should be run once state changed to 'expanded'
            expandedStateResizeErrorEventTester.start(done);
        }
    }
}

// =================================  TESTS  ==================================
function resizeWithoutSetSize(mraid) {
    mraid.resize();
}

function resizeBeforeSetSize(mraid) {
    mraid.resize();
    mraid.setResizeProperties({
        width: 100,
        height: 100,
        offsetX: 0,
        offsetY: 0
    });
}

function setUndefinedResizeProperties(mraid) {
    mraid.setResizeProperties();
}

function setEmptyResizeProperties(mraid) {
    mraid.setResizeProperties({});
}

function setIncompleteResizeProperties(mraid) {
    mraid.setResizeProperties({
        width: 100
    });
}

function setInvalidResizeProperties(mraid) {
    mraid.setResizeProperties({
        width: 'string',
        height: 'string',
        offsetX: 'string',
        offsetY: 'string'
    });
}

function setTooSmallWidthAndHeightResizeProperties(mraid) {
    mraid.setResizeProperties({
        width: 25,
        height: 25,
        offsetX: 0,
        offsetY: 0
    });
}

function setTooLargeSizeResizeProperties(mraid) {
    var maxSize = mraid.getMaxSize();
    var props = {
        width: maxSize.width + 10,
        height: maxSize.height + 10,
        offsetX: -5,
        offsetY: -5,
        allowOffscreen: false
    };
    mraid.setResizeProperties(props);
}

function setCloseButtonZoneOffscreenOffsetX(mraid) {
    var maxSize = mraid.getMaxSize();
    var props = {
        width: maxSize.width,
        height: maxSize.height,
        offsetX: 50,
        offsetY: 0,
        allowOffscreen: true
    };
    mraid.setResizeProperties(props);
}

function setCloseButtonZoneOffscreenOffsetY(mraid) {
    var maxSize = mraid.getMaxSize();
    var props = {
        width: maxSize.width,
        height: maxSize.height,
        offsetX: 0,
        offsetY: -50,
        allowOffscreen: true
    };
    mraid.setResizeProperties(props);
}

function setCloseButtonZoneOffscreenOffsetXY(mraid) {
    var maxSize = mraid.getMaxSize();
    var props = {
        width: maxSize.width,
        height: maxSize.height,
        offsetX: 25,
        offsetY: -25,
        allowOffscreen: true
    };
    mraid.setResizeProperties(props);
}

function setCloseButtonZoneOffscreenWidth(mraid) {
    var maxSize = mraid.getMaxSize();
    var props = {
        width: maxSize.width + 50,
        height: maxSize.height,
        offsetX: 0,
        offsetY: 0,
        allowOffscreen: true
    };
    mraid.setResizeProperties(props);
}

function resizeInExpandedStateTest(mraid) {
    if (mraid.getState() !== 'expanded') {
        throw 'Expanded state required for this test (resizeInExpandedStateTest).';
    }
    mraid.setResizeProperties({
        width: 100,
        height: 100,
        offsetX: 0,
        offsetY: 0
    });
    mraid.resize();
}
// ============================================================================

// ================================ HELPER TYPES ==============================
function SequentialRunner(eventTesters) {
    this.eventTesters = eventTesters;
    this.current = 0;

    SequentialRunner.prototype.run = (done) => {
        if (this.eventTesters && this.current < this.eventTesters.length) {
            this.eventTesters[this.current].start(() => this.run(done));
        } else {
            if (done) {
                done();
            }
        }
        this.current++;
    }
}

function EventTester(tests, event, description, mraid, waitInterval, log, error) {
    this.tests = tests;
    this.description = description;
    this.mraid = mraid;
    this.waitInterval = waitInterval || 5000;
    this.log = log || console.log;
    this.error = error || console.error;
    this.index = 0;

    EventTester.prototype.current = function () {
        return this.tests[this.index];
    };
    EventTester.prototype.hasNext = function () {
        return this.index < this.tests.length;
    };
    EventTester.prototype.moveNext = function () {
        this.index++;
    };
    EventTester.prototype.start = function (complete) {
        this.complete = complete;
        this.index = 0;
        this.run();
    };
    EventTester.prototype.done = function (err, test) {
        test.err = err;
        if (err) {
            this.error('FAILED: [' + test.description + '], error: [' + err + ']');
        } else {
            this.log('PASSED: [' + test.description + ']');
        }
        this.run();
    };
    EventTester.prototype.run = function () {
        if (this.hasNext()) {
            var test = this.current();
            try {
                this.testEvent(test, this.done, this.index);
            } catch (err) {
                this.error('Error in test', err);
            }
            this.moveNext();
        } else {
            this.log('Finished: [' + this.description + ']');
            if (this.complete) {
                this.complete();
            }
        }
    };
    EventTester.prototype.testEvent = function (test) {
        var handler = () => {
            clearTimeout(wait);
            this.mraid.removeEventListener(this.event, handler);
            this.done(undefined, test);
        };

        this.mraid.addEventListener(this.event, handler);

        test.test(this.mraid);

        var wait = setTimeout(() => {
            this.mraid.removeEventListener(this.event, handler);
            clearTimeout(wait);
            this.done('Event "' + event + '" was not fired.', test);
        }, this.waitInterval);
    }
}
// ============================================================================